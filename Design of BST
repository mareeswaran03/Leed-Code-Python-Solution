class BST:
    def __init__(self,key):
        self.key=key
        self.lchild=None
        self.rchild=None
    
    def insert(self,data):
        if self.key is None:
            self.key=data
            return
        if self.key==data:
            return
        if data<self.key:
            if self.lchild:
                self.lchild.insert(data)
            else:
                self.lchild = BST(data)
        else:
            if self.rchild:
                self.rchild.insert(data)
            else:
                self.rchild=BST(data)

    def search(self,data):
        if self.key==data:
            print("Node is found")
            return 
        if data<self.key:
            if self.lchild:
                self.lchild.search(data)
            else:
                print("Node is not present in the Tree!")
        else:
            if self.rchild:
                self.rchild.search(data)
            else:
                print("Node is not Present in the Tree!")

    def preorder(self):
        print(self.key,end=" -----> ")
        if self.lchild:
            self.lchild.preorder()
        if self.rchild:
            self.rchild.preorder()
    
    def inorder(self):
        if self.lchild:
            self.lchild.inorder()
        print(self.key,end=" -----> ")
        if self.rchild:
            self.rchild.inorder()

    def postorder(self):
        if self.lchild:
            self.lchild.postorder()
        if self.rchild:
            self.rchild.postorder()
        print(self.key,end=" -----> ")

    def delete(self,data,curr):
        if self.key is None:
            print("Tree is not Present!")
            return 
        if data<self.key:
            if self.lchild:
                self.lchild=self.lchild.delete(data,curr)
            else:
                print("Node is not present in the BST")
        elif data>self.key:
            if self.rchild:
                self.rchild=self.rchild.delete(data,curr)
            else:
                print("Node is not present in the BST")
        else:
            if self.lchild is None:
                temp= self.rchild
                if data == curr:
                    self.key=temp.key
                    self.lchild=self.rchild.lchild
                    self.rchild=self.rchild.rchild
                    temp= None
                    return
                self=None
                return temp
            if self.rchild is None:
                temp= self.lchild
                if data == curr:
                    self.key=temp.key
                    self.lchild=self.lchild.lchild
                    self.rchild=self.lchild.rchild
                    temp= None
                    return
                self=None
                return temp
            node = self.rchild
            while node.lchild:
                node=node.lchild
            self.key=node.key
            self.rchild= self.rchild.delete(node.key,curr)
        return self
    
    def min(self):
        curr=self
        while curr.lchild:
            curr=curr.lchild
        print("\nThe Minimum value in this BTS is:",curr.key)
    
    def max(self):
        curr=self
        while curr.rchild:
            curr=curr.rchild
        print("\nThe Maximum value in this BTS is:",curr.key)


            

def count(node):
    if node is None:
        return 0 
    return 1+count(node.lchild)+count(node.rchild)

root = BST(10)
lst1=[20,4,36,4,5,1,2,3]
for i in lst1:
    root.insert(i)
if count(root)>1:
    root.delete(10,root.key)
else:
    print("Can't perform delete operation")
print("PREORDER TRAVERSAL:",end=" ")
root.preorder()
root.delete(4,root.key)
print("\nPREORDER TRAVERSAL:",end=" ")
root.preorder()
root.min()
root.max()




