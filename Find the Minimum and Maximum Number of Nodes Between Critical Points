# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def nodesBetweenCriticalPoints(self, head: Optional[ListNode]) -> List[int]:
        #set min_distance to maximum possiblity
        min_distance=10**5
        #Initilize prev,curr,index for traverse through the linked list 
        prev=head
        curr=head.next
        index=1
        #this two variables are for storing the indexes 
        first_critical_index=-1
        last_critical_index=-1
        #Traverse through the linked list
        while curr.next:
            if ((curr.val>prev.val and curr.val>curr.next.val) or 
                (curr.val<prev.val and curr.val<curr.next.val)):
                if (first_critical_index==-1):
                    first_critical_index=index
                
                if (last_critical_index!=-1):
                    min_distance=min(min_distance,index-last_critical_index)
                
                last_critical_index=index
                print(last_critical_index)
            prev=prev.next
            curr=curr.next
            index+=1
        if min_distance==10**5:
            return [-1,-1]
        else:
            return [min_distance,last_critical_index-first_critical_index]
        
